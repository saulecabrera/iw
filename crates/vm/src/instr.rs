use crate::val::{RefValue, Value};
use std::convert::TryFrom;
use wasmparser::{
    BinaryReaderError, Ieee32, Ieee64, MemoryImmediate, Operator, Operator::*, SIMDLaneIndex, Type,
    TypeOrFuncType, V128,
};

#[derive(Debug)]
pub struct Instr {
    kind: Kind,
}

impl Instr {
    pub fn const_value(&self) -> Option<Value> {
        match self.kind {
            Kind::I32Const { value } => Some(Value::I32(value)),
            Kind::I64Const { value } => Some(Value::I64(value)),
            Kind::F32Const { value } => Some(Value::F32(value.bits())),
            Kind::F64Const { value } => Some(Value::F64(value.bits())),
            _ => None,
        }
    }

    pub fn funcref_idx(&self) -> Option<u32> {
        match self.kind {
            Kind::RefFunc {
                function_index: idx,
            } => Some(idx),
            _ => None,
        }
    }
}

#[derive(Debug)]
pub struct BrTableData {
    targets: Vec<u32>,
    default: u32,
}

fn convert_table(table: wasmparser::BrTable) -> Result<BrTableData, BinaryReaderError> {
    Ok(BrTableData {
        targets: table.targets().collect::<Result<Vec<_>, _>>()?,
        default: table.default(),
    })
}

impl<'a> TryFrom<Operator<'a>> for Instr {
    type Error = BinaryReaderError;

    fn try_from(operator: Operator<'a>) -> Result<Self, Self::Error> {
        let kind = match operator {
            Unreachable => Kind::Unreachable,
            Nop => Kind::Nop,
            Block { ty } => Kind::Block { ty },
            Loop { ty } => Kind::Loop { ty },
            If { ty } => Kind::If { ty },
            Else => Kind::Else,
            Try { ty } => Kind::Try { ty },
            Catch { index } => Kind::Catch { index },
            Throw { index } => Kind::Throw { index },
            Rethrow { relative_depth } => Kind::Rethrow { relative_depth },
            End => Kind::End,
            Br { relative_depth } => Kind::Br { relative_depth },
            BrIf { relative_depth } => Kind::BrIf { relative_depth },
            BrTable { table } => Kind::BrTable {
                table: convert_table(table)?,
            },
            Return => Kind::Return,
            Call { function_index } => Kind::Call { function_index },
            CallIndirect { index, table_index } => Kind::CallIndirect { index, table_index },
            ReturnCall { function_index } => Kind::ReturnCall { function_index },
            ReturnCallIndirect { index, table_index } => {
                Kind::ReturnCallIndirect { index, table_index }
            }
            Delegate { relative_depth } => Kind::Delegate { relative_depth },
            CatchAll => Kind::CatchAll,
            Drop => Kind::Drop,
            Select => Kind::Select,
            TypedSelect { ty } => Kind::TypedSelect { ty },
            LocalGet { local_index } => Kind::LocalGet { local_index },
            LocalSet { local_index } => Kind::LocalSet { local_index },
            LocalTee { local_index } => Kind::LocalTee { local_index },
            GlobalGet { global_index } => Kind::GlobalGet { global_index },
            GlobalSet { global_index } => Kind::GlobalSet { global_index },
            I32Load { memarg } => Kind::I32Load { memarg },
            I64Load { memarg } => Kind::I64Load { memarg },
            F32Load { memarg } => Kind::F32Load { memarg },
            F64Load { memarg } => Kind::F64Load { memarg },
            I32Load8S { memarg } => Kind::I32Load8S { memarg },
            I32Load8U { memarg } => Kind::I32Load8U { memarg },
            I32Load16S { memarg } => Kind::I32Load16S { memarg },
            I32Load16U { memarg } => Kind::I32Load16U { memarg },
            I64Load8S { memarg } => Kind::I64Load8S { memarg },
            I64Load8U { memarg } => Kind::I64Load8U { memarg },
            I64Load16S { memarg } => Kind::I64Load16S { memarg },
            I64Load16U { memarg } => Kind::I64Load16U { memarg },
            I64Load32S { memarg } => Kind::I64Load32S { memarg },
            I64Load32U { memarg } => Kind::I64Load32U { memarg },
            I32Store { memarg } => Kind::I32Store { memarg },
            I64Store { memarg } => Kind::I64Store { memarg },
            F32Store { memarg } => Kind::F32Store { memarg },
            F64Store { memarg } => Kind::F64Store { memarg },
            I32Store8 { memarg } => Kind::I32Store8 { memarg },
            I32Store16 { memarg } => Kind::I32Store16 { memarg },
            I64Store8 { memarg } => Kind::I64Store8 { memarg },
            I64Store16 { memarg } => Kind::I64Store16 { memarg },
            I64Store32 { memarg } => Kind::I64Store32 { memarg },
            MemorySize { mem, mem_byte } => Kind::MemorySize { mem, mem_byte },
            MemoryGrow { mem, mem_byte } => Kind::MemoryGrow { mem, mem_byte },
            I32Const { value } => Kind::I32Const { value },
            I64Const { value } => Kind::I64Const { value },
            F32Const { value } => Kind::F32Const { value },
            F64Const { value } => Kind::F64Const { value },
            RefNull { ty } => Kind::RefNull { ty },
            RefIsNull => Kind::RefIsNull,
            RefFunc { function_index } => Kind::RefFunc { function_index },
            I32Eqz => Kind::I32Eqz,
            I32Eq => Kind::I32Eq,
            I32Ne => Kind::I32Ne,
            I32LtS => Kind::I32LtS,
            I32LtU => Kind::I32LtU,
            I32GtS => Kind::I32GtS,
            I32GtU => Kind::I32GtU,
            I32LeS => Kind::I32LeS,
            I32LeU => Kind::I32LeU,
            I32GeS => Kind::I32GeS,
            I32GeU => Kind::I32GeU,
            I64Eqz => Kind::I64Eqz,
            I64Eq => Kind::I64Eq,
            I64Ne => Kind::I64Ne,
            I64LtS => Kind::I64LtS,
            I64LtU => Kind::I64LtU,
            I64GtS => Kind::I64GtS,
            I64GtU => Kind::I64GtU,
            I64LeS => Kind::I64LeS,
            I64LeU => Kind::I64LeU,
            I64GeS => Kind::I64GeS,
            I64GeU => Kind::I64GeU,
            F32Eq => Kind::F32Eq,
            F32Ne => Kind::F32Ne,
            F32Lt => Kind::F32Lt,
            F32Gt => Kind::F32Gt,
            F32Le => Kind::F32Le,
            F32Ge => Kind::F32Ge,
            F64Eq => Kind::F64Eq,
            F64Ne => Kind::F64Ne,
            F64Lt => Kind::F64Lt,
            F64Gt => Kind::F64Gt,
            F64Le => Kind::F64Le,
            F64Ge => Kind::F64Ge,
            I32Clz => Kind::I32Clz,
            I32Ctz => Kind::I32Ctz,
            I32Popcnt => Kind::I32Popcnt,
            I32Add => Kind::I32Add,
            I32Sub => Kind::I32Sub,
            I32Mul => Kind::I32Mul,
            I32DivS => Kind::I32DivS,
            I32DivU => Kind::I32DivU,
            I32RemS => Kind::I32RemS,
            I32RemU => Kind::I32RemU,
            I32And => Kind::I32And,
            I32Or => Kind::I32Or,
            I32Xor => Kind::I32Xor,
            I32Shl => Kind::I32Shl,
            I32ShrS => Kind::I32ShrS,
            I32ShrU => Kind::I32ShrU,
            I32Rotl => Kind::I32Rotl,
            I32Rotr => Kind::I32Rotr,
            I64Clz => Kind::I64Clz,
            I64Ctz => Kind::I64Ctz,
            I64Popcnt => Kind::I64Popcnt,
            I64Add => Kind::I64Add,
            I64Sub => Kind::I64Sub,
            I64Mul => Kind::I64Mul,
            I64DivS => Kind::I64DivS,
            I64DivU => Kind::I64DivU,
            I64RemS => Kind::I64RemS,
            I64RemU => Kind::I64RemU,
            I64And => Kind::I64And,
            I64Or => Kind::I64Or,
            I64Xor => Kind::I64Xor,
            I64Shl => Kind::I64Shl,
            I64ShrS => Kind::I64ShrS,
            I64ShrU => Kind::I64ShrU,
            I64Rotl => Kind::I64Rotl,
            I64Rotr => Kind::I64Rotr,
            F32Abs => Kind::F32Abs,
            F32Neg => Kind::F32Neg,
            F32Ceil => Kind::F32Ceil,
            F32Floor => Kind::F32Floor,
            F32Trunc => Kind::F32Trunc,
            F32Nearest => Kind::F32Nearest,
            F32Sqrt => Kind::F32Sqrt,
            F32Add => Kind::F32Add,
            F32Sub => Kind::F32Sub,
            F32Mul => Kind::F32Mul,
            F32Div => Kind::F32Div,
            F32Min => Kind::F32Min,
            F32Max => Kind::F32Max,
            F32Copysign => Kind::F32Copysign,
            F64Abs => Kind::F64Abs,
            F64Neg => Kind::F64Neg,
            F64Ceil => Kind::F64Ceil,
            F64Floor => Kind::F64Floor,
            F64Trunc => Kind::F64Trunc,
            F64Nearest => Kind::F64Nearest,
            F64Sqrt => Kind::F64Sqrt,
            F64Add => Kind::F64Add,
            F64Sub => Kind::F64Sub,
            F64Mul => Kind::F64Mul,
            F64Div => Kind::F64Div,
            F64Min => Kind::F64Min,
            F64Max => Kind::F64Max,
            F64Copysign => Kind::F64Copysign,
            I32WrapI64 => Kind::I32WrapI64,
            I32TruncF32S => Kind::I32TruncF32S,
            I32TruncF32U => Kind::I32TruncF32U,
            I32TruncF64S => Kind::I32TruncF64S,
            I32TruncF64U => Kind::I32TruncF64U,
            I64ExtendI32S => Kind::I64ExtendI32S,
            I64ExtendI32U => Kind::I64ExtendI32U,
            I64TruncF32S => Kind::I64TruncF32S,
            I64TruncF32U => Kind::I64TruncF32U,
            I64TruncF64S => Kind::I64TruncF64S,
            I64TruncF64U => Kind::I64TruncF64U,
            F32ConvertI32S => Kind::F32ConvertI32S,
            F32ConvertI32U => Kind::F32ConvertI32U,
            F32ConvertI64S => Kind::F32ConvertI64S,
            F32ConvertI64U => Kind::F32ConvertI64U,
            F32DemoteF64 => Kind::F32DemoteF64,
            F64ConvertI32S => Kind::F64ConvertI32S,
            F64ConvertI32U => Kind::F64ConvertI32U,
            F64ConvertI64S => Kind::F64ConvertI64S,
            F64ConvertI64U => Kind::F64ConvertI64U,
            F64PromoteF32 => Kind::F64PromoteF32,
            I32ReinterpretF32 => Kind::I32ReinterpretF32,
            I64ReinterpretF64 => Kind::I64ReinterpretF64,
            F32ReinterpretI32 => Kind::F32ReinterpretI32,
            F64ReinterpretI64 => Kind::F64ReinterpretI64,
            I32Extend8S => Kind::I32Extend8S,
            I32Extend16S => Kind::I32Extend16S,
            I64Extend8S => Kind::I64Extend8S,
            I64Extend16S => Kind::I64Extend16S,
            I64Extend32S => Kind::I64Extend32S,
            I32TruncSatF32S => Kind::I32TruncSatF32S,
            I32TruncSatF32U => Kind::I32TruncSatF32U,
            I32TruncSatF64S => Kind::I32TruncSatF64S,
            I32TruncSatF64U => Kind::I32TruncSatF64U,
            I64TruncSatF32S => Kind::I64TruncSatF32S,
            I64TruncSatF32U => Kind::I64TruncSatF32U,
            I64TruncSatF64S => Kind::I64TruncSatF64S,
            I64TruncSatF64U => Kind::I64TruncSatF64U,
            MemoryInit { segment, mem } => Kind::MemoryInit { segment, mem },
            DataDrop { segment } => Kind::DataDrop { segment },
            MemoryCopy { src, dst } => Kind::MemoryCopy { src, dst },
            MemoryFill { mem } => Kind::MemoryFill { mem },
            TableInit { segment, table } => Kind::TableInit { segment, table },
            ElemDrop { segment } => Kind::ElemDrop { segment },
            TableCopy {
                dst_table,
                src_table,
            } => Kind::TableCopy {
                dst_table,
                src_table,
            },
            TableFill { table } => Kind::TableFill { table },
            TableGet { table } => Kind::TableGet { table },
            TableSet { table } => Kind::TableSet { table },
            TableGrow { table } => Kind::TableGrow { table },
            TableSize { table } => Kind::TableSize { table },
            MemoryAtomicNotify { memarg } => Kind::MemoryAtomicNotify { memarg },
            MemoryAtomicWait32 { memarg } => Kind::MemoryAtomicWait32 { memarg },
            MemoryAtomicWait64 { memarg } => Kind::MemoryAtomicWait64 { memarg },
            AtomicFence { flags } => Kind::AtomicFence { flags },
            I32AtomicLoad { memarg } => Kind::I32AtomicLoad { memarg },
            I64AtomicLoad { memarg } => Kind::I64AtomicLoad { memarg },
            I32AtomicLoad8U { memarg } => Kind::I32AtomicLoad8U { memarg },
            I32AtomicLoad16U { memarg } => Kind::I32AtomicLoad16U { memarg },
            I64AtomicLoad8U { memarg } => Kind::I64AtomicLoad8U { memarg },
            I64AtomicLoad16U { memarg } => Kind::I64AtomicLoad16U { memarg },
            I64AtomicLoad32U { memarg } => Kind::I64AtomicLoad32U { memarg },
            I32AtomicStore { memarg } => Kind::I32AtomicStore { memarg },
            I64AtomicStore { memarg } => Kind::I64AtomicStore { memarg },
            I32AtomicStore8 { memarg } => Kind::I32AtomicStore8 { memarg },
            I32AtomicStore16 { memarg } => Kind::I32AtomicStore16 { memarg },
            I64AtomicStore8 { memarg } => Kind::I64AtomicStore8 { memarg },
            I64AtomicStore16 { memarg } => Kind::I64AtomicStore16 { memarg },
            I64AtomicStore32 { memarg } => Kind::I64AtomicStore32 { memarg },
            I32AtomicRmwAdd { memarg } => Kind::I32AtomicRmwAdd { memarg },
            I64AtomicRmwAdd { memarg } => Kind::I64AtomicRmwAdd { memarg },
            I32AtomicRmw8AddU { memarg } => Kind::I32AtomicRmw8AddU { memarg },
            I32AtomicRmw16AddU { memarg } => Kind::I32AtomicRmw16AddU { memarg },
            I64AtomicRmw8AddU { memarg } => Kind::I64AtomicRmw8AddU { memarg },
            I64AtomicRmw16AddU { memarg } => Kind::I64AtomicRmw16AddU { memarg },
            I64AtomicRmw32AddU { memarg } => Kind::I64AtomicRmw32AddU { memarg },
            I32AtomicRmwSub { memarg } => Kind::I32AtomicRmwSub { memarg },
            I64AtomicRmwSub { memarg } => Kind::I64AtomicRmwSub { memarg },
            I32AtomicRmw8SubU { memarg } => Kind::I32AtomicRmw8SubU { memarg },
            I32AtomicRmw16SubU { memarg } => Kind::I32AtomicRmw16SubU { memarg },
            I64AtomicRmw8SubU { memarg } => Kind::I64AtomicRmw8SubU { memarg },
            I64AtomicRmw16SubU { memarg } => Kind::I64AtomicRmw16SubU { memarg },
            I64AtomicRmw32SubU { memarg } => Kind::I64AtomicRmw32SubU { memarg },
            I32AtomicRmwAnd { memarg } => Kind::I32AtomicRmwAnd { memarg },
            I64AtomicRmwAnd { memarg } => Kind::I64AtomicRmwAnd { memarg },
            I32AtomicRmw8AndU { memarg } => Kind::I32AtomicRmw8AndU { memarg },
            I32AtomicRmw16AndU { memarg } => Kind::I32AtomicRmw16AndU { memarg },
            I64AtomicRmw8AndU { memarg } => Kind::I64AtomicRmw8AndU { memarg },
            I64AtomicRmw16AndU { memarg } => Kind::I64AtomicRmw16AndU { memarg },
            I64AtomicRmw32AndU { memarg } => Kind::I64AtomicRmw32AndU { memarg },
            I32AtomicRmwOr { memarg } => Kind::I32AtomicRmwOr { memarg },
            I64AtomicRmwOr { memarg } => Kind::I64AtomicRmwOr { memarg },
            I32AtomicRmw8OrU { memarg } => Kind::I32AtomicRmw8OrU { memarg },
            I32AtomicRmw16OrU { memarg } => Kind::I32AtomicRmw16OrU { memarg },
            I64AtomicRmw8OrU { memarg } => Kind::I64AtomicRmw8OrU { memarg },
            I64AtomicRmw16OrU { memarg } => Kind::I64AtomicRmw16OrU { memarg },
            I64AtomicRmw32OrU { memarg } => Kind::I64AtomicRmw32OrU { memarg },
            I32AtomicRmwXor { memarg } => Kind::I32AtomicRmwXor { memarg },
            I64AtomicRmwXor { memarg } => Kind::I64AtomicRmwXor { memarg },
            I32AtomicRmw8XorU { memarg } => Kind::I32AtomicRmw8XorU { memarg },
            I32AtomicRmw16XorU { memarg } => Kind::I32AtomicRmw16XorU { memarg },
            I64AtomicRmw8XorU { memarg } => Kind::I64AtomicRmw8XorU { memarg },
            I64AtomicRmw16XorU { memarg } => Kind::I64AtomicRmw16XorU { memarg },
            I64AtomicRmw32XorU { memarg } => Kind::I64AtomicRmw32XorU { memarg },
            I32AtomicRmwXchg { memarg } => Kind::I32AtomicRmwXchg { memarg },
            I64AtomicRmwXchg { memarg } => Kind::I64AtomicRmwXchg { memarg },
            I32AtomicRmw8XchgU { memarg } => Kind::I32AtomicRmw8XchgU { memarg },
            I32AtomicRmw16XchgU { memarg } => Kind::I32AtomicRmw16XchgU { memarg },
            I64AtomicRmw8XchgU { memarg } => Kind::I64AtomicRmw8XchgU { memarg },
            I64AtomicRmw16XchgU { memarg } => Kind::I64AtomicRmw16XchgU { memarg },
            I64AtomicRmw32XchgU { memarg } => Kind::I64AtomicRmw32XchgU { memarg },
            I32AtomicRmwCmpxchg { memarg } => Kind::I32AtomicRmwCmpxchg { memarg },
            I64AtomicRmwCmpxchg { memarg } => Kind::I64AtomicRmwCmpxchg { memarg },
            I32AtomicRmw8CmpxchgU { memarg } => Kind::I32AtomicRmw8CmpxchgU { memarg },
            I32AtomicRmw16CmpxchgU { memarg } => Kind::I32AtomicRmw16CmpxchgU { memarg },
            I64AtomicRmw8CmpxchgU { memarg } => Kind::I64AtomicRmw8CmpxchgU { memarg },
            I64AtomicRmw16CmpxchgU { memarg } => Kind::I64AtomicRmw16CmpxchgU { memarg },
            I64AtomicRmw32CmpxchgU { memarg } => Kind::I64AtomicRmw32CmpxchgU { memarg },
            V128Load { memarg } => Kind::V128Load { memarg },
            V128Load8x8S { memarg } => Kind::V128Load8x8S { memarg },
            V128Load8x8U { memarg } => Kind::V128Load8x8U { memarg },
            V128Load16x4S { memarg } => Kind::V128Load16x4S { memarg },
            V128Load16x4U { memarg } => Kind::V128Load16x4U { memarg },
            V128Load32x2S { memarg } => Kind::V128Load32x2S { memarg },
            V128Load32x2U { memarg } => Kind::V128Load32x2U { memarg },
            V128Load8Splat { memarg } => Kind::V128Load8Splat { memarg },
            V128Load16Splat { memarg } => Kind::V128Load16Splat { memarg },
            V128Load32Splat { memarg } => Kind::V128Load32Splat { memarg },
            V128Load64Splat { memarg } => Kind::V128Load64Splat { memarg },
            V128Load32Zero { memarg } => Kind::V128Load32Zero { memarg },
            V128Load64Zero { memarg } => Kind::V128Load64Zero { memarg },
            V128Store { memarg } => Kind::V128Store { memarg },
            V128Load8Lane { memarg, lane } => Kind::V128Load8Lane { memarg, lane },
            V128Load16Lane { memarg, lane } => Kind::V128Load16Lane { memarg, lane },
            V128Load32Lane { memarg, lane } => Kind::V128Load32Lane { memarg, lane },
            V128Load64Lane { memarg, lane } => Kind::V128Load64Lane { memarg, lane },
            V128Store8Lane { memarg, lane } => Kind::V128Store8Lane { memarg, lane },
            V128Store16Lane { memarg, lane } => Kind::V128Store16Lane { memarg, lane },
            V128Store32Lane { memarg, lane } => Kind::V128Store32Lane { memarg, lane },
            V128Store64Lane { memarg, lane } => Kind::V128Store64Lane { memarg, lane },
            V128Const { value } => Kind::V128Const { value },
            I8x16Shuffle { lanes } => Kind::I8x16Shuffle { lanes },
            I8x16ExtractLaneS { lane } => Kind::I8x16ExtractLaneS { lane },
            I8x16ExtractLaneU { lane } => Kind::I8x16ExtractLaneU { lane },
            I8x16ReplaceLane { lane } => Kind::I8x16ReplaceLane { lane },
            I16x8ExtractLaneS { lane } => Kind::I16x8ExtractLaneS { lane },
            I16x8ExtractLaneU { lane } => Kind::I16x8ExtractLaneU { lane },
            I16x8ReplaceLane { lane } => Kind::I16x8ReplaceLane { lane },
            I32x4ExtractLane { lane } => Kind::I32x4ExtractLane { lane },
            I32x4ReplaceLane { lane } => Kind::I32x4ReplaceLane { lane },
            I64x2ExtractLane { lane } => Kind::I64x2ExtractLane { lane },
            I64x2ReplaceLane { lane } => Kind::I64x2ReplaceLane { lane },
            F32x4ExtractLane { lane } => Kind::F32x4ExtractLane { lane },
            F32x4ReplaceLane { lane } => Kind::F32x4ReplaceLane { lane },
            F64x2ExtractLane { lane } => Kind::F64x2ExtractLane { lane },
            F64x2ReplaceLane { lane } => Kind::F64x2ReplaceLane { lane },
            I8x16Swizzle => Kind::I8x16Swizzle,
            I8x16Splat => Kind::I8x16Splat,
            I16x8Splat => Kind::I16x8Splat,
            I32x4Splat => Kind::I32x4Splat,
            I64x2Splat => Kind::I64x2Splat,
            F32x4Splat => Kind::F32x4Splat,
            F64x2Splat => Kind::F64x2Splat,
            I8x16Eq => Kind::I8x16Eq,
            I8x16Ne => Kind::I8x16Ne,
            I8x16LtS => Kind::I8x16LtS,
            I8x16LtU => Kind::I8x16LtU,
            I8x16GtS => Kind::I8x16GtS,
            I8x16GtU => Kind::I8x16GtU,
            I8x16LeS => Kind::I8x16LeS,
            I8x16LeU => Kind::I8x16LeU,
            I8x16GeS => Kind::I8x16GeS,
            I8x16GeU => Kind::I8x16GeU,
            I16x8Eq => Kind::I16x8Eq,
            I16x8Ne => Kind::I16x8Ne,
            I16x8LtS => Kind::I16x8LtS,
            I16x8LtU => Kind::I16x8LtU,
            I16x8GtS => Kind::I16x8GtS,
            I16x8GtU => Kind::I16x8GtU,
            I16x8LeS => Kind::I16x8LeS,
            I16x8LeU => Kind::I16x8LeU,
            I16x8GeS => Kind::I16x8GeS,
            I16x8GeU => Kind::I16x8GeU,
            I32x4Eq => Kind::I32x4Eq,
            I32x4Ne => Kind::I32x4Ne,
            I32x4LtS => Kind::I32x4LtS,
            I32x4LtU => Kind::I32x4LtU,
            I32x4GtS => Kind::I32x4GtS,
            I32x4GtU => Kind::I32x4GtU,
            I32x4LeS => Kind::I32x4LeS,
            I32x4LeU => Kind::I32x4LeU,
            I32x4GeS => Kind::I32x4GeS,
            I32x4GeU => Kind::I32x4GeU,
            I64x2Eq => Kind::I64x2Eq,
            I64x2Ne => Kind::I64x2Ne,
            I64x2LtS => Kind::I64x2LtS,
            I64x2GtS => Kind::I64x2GtS,
            I64x2LeS => Kind::I64x2LeS,
            I64x2GeS => Kind::I64x2GeS,
            F32x4Eq => Kind::F32x4Eq,
            F32x4Ne => Kind::F32x4Ne,
            F32x4Lt => Kind::F32x4Lt,
            F32x4Gt => Kind::F32x4Gt,
            F32x4Le => Kind::F32x4Le,
            F32x4Ge => Kind::F32x4Ge,
            F64x2Eq => Kind::F64x2Eq,
            F64x2Ne => Kind::F64x2Ne,
            F64x2Lt => Kind::F64x2Lt,
            F64x2Gt => Kind::F64x2Gt,
            F64x2Le => Kind::F64x2Le,
            F64x2Ge => Kind::F64x2Ge,
            V128Not => Kind::V128Not,
            V128And => Kind::V128And,
            V128AndNot => Kind::V128AndNot,
            V128Or => Kind::V128Or,
            V128Xor => Kind::V128Xor,
            V128Bitselect => Kind::V128Bitselect,
            V128AnyTrue => Kind::V128AnyTrue,
            I8x16Abs => Kind::I8x16Abs,
            I8x16Neg => Kind::I8x16Neg,
            I8x16Popcnt => Kind::I8x16Popcnt,
            I8x16AllTrue => Kind::I8x16AllTrue,
            I8x16Bitmask => Kind::I8x16Bitmask,
            I8x16NarrowI16x8S => Kind::I8x16NarrowI16x8S,
            I8x16NarrowI16x8U => Kind::I8x16NarrowI16x8U,
            I8x16Shl => Kind::I8x16Shl,
            I8x16ShrS => Kind::I8x16ShrS,
            I8x16ShrU => Kind::I8x16ShrU,
            I8x16Add => Kind::I8x16Add,
            I8x16AddSatS => Kind::I8x16AddSatS,
            I8x16AddSatU => Kind::I8x16AddSatU,
            I8x16Sub => Kind::I8x16Sub,
            I8x16SubSatS => Kind::I8x16SubSatS,
            I8x16SubSatU => Kind::I8x16SubSatU,
            I8x16MinS => Kind::I8x16MinS,
            I8x16MinU => Kind::I8x16MinU,
            I8x16MaxS => Kind::I8x16MaxS,
            I8x16MaxU => Kind::I8x16MaxU,
            I8x16RoundingAverageU => Kind::I8x16RoundingAverageU,
            I16x8ExtAddPairwiseI8x16S => Kind::I16x8ExtAddPairwiseI8x16S,
            I16x8ExtAddPairwiseI8x16U => Kind::I16x8ExtAddPairwiseI8x16U,
            I16x8Abs => Kind::I16x8Abs,
            I16x8Neg => Kind::I16x8Neg,
            I16x8Q15MulrSatS => Kind::I16x8Q15MulrSatS,
            I16x8AllTrue => Kind::I16x8AllTrue,
            I16x8Bitmask => Kind::I16x8Bitmask,
            I16x8NarrowI32x4S => Kind::I16x8NarrowI32x4S,
            I16x8NarrowI32x4U => Kind::I16x8NarrowI32x4U,
            I16x8ExtendLowI8x16S => Kind::I16x8ExtendLowI8x16S,
            I16x8ExtendHighI8x16S => Kind::I16x8ExtendHighI8x16S,
            I16x8ExtendLowI8x16U => Kind::I16x8ExtendLowI8x16U,
            I16x8ExtendHighI8x16U => Kind::I16x8ExtendHighI8x16U,
            I16x8Shl => Kind::I16x8Shl,
            I16x8ShrS => Kind::I16x8ShrS,
            I16x8ShrU => Kind::I16x8ShrU,
            I16x8Add => Kind::I16x8Add,
            I16x8AddSatS => Kind::I16x8AddSatS,
            I16x8AddSatU => Kind::I16x8AddSatU,
            I16x8Sub => Kind::I16x8Sub,
            I16x8SubSatS => Kind::I16x8SubSatS,
            I16x8SubSatU => Kind::I16x8SubSatU,
            I16x8Mul => Kind::I16x8Mul,
            I16x8MinS => Kind::I16x8MinS,
            I16x8MinU => Kind::I16x8MinU,
            I16x8MaxS => Kind::I16x8MaxS,
            I16x8MaxU => Kind::I16x8MaxU,
            I16x8RoundingAverageU => Kind::I16x8RoundingAverageU,
            I16x8ExtMulLowI8x16S => Kind::I16x8ExtMulLowI8x16S,
            I16x8ExtMulHighI8x16S => Kind::I16x8ExtMulHighI8x16S,
            I16x8ExtMulLowI8x16U => Kind::I16x8ExtMulLowI8x16U,
            I16x8ExtMulHighI8x16U => Kind::I16x8ExtMulHighI8x16U,
            I32x4ExtAddPairwiseI16x8S => Kind::I32x4ExtAddPairwiseI16x8S,
            I32x4ExtAddPairwiseI16x8U => Kind::I32x4ExtAddPairwiseI16x8U,
            I32x4Abs => Kind::I32x4Abs,
            I32x4Neg => Kind::I32x4Neg,
            I32x4AllTrue => Kind::I32x4AllTrue,
            I32x4Bitmask => Kind::I32x4Bitmask,
            I32x4ExtendLowI16x8S => Kind::I32x4ExtendLowI16x8S,
            I32x4ExtendHighI16x8S => Kind::I32x4ExtendHighI16x8S,
            I32x4ExtendLowI16x8U => Kind::I32x4ExtendLowI16x8U,
            I32x4ExtendHighI16x8U => Kind::I32x4ExtendHighI16x8U,
            I32x4Shl => Kind::I32x4Shl,
            I32x4ShrS => Kind::I32x4ShrS,
            I32x4ShrU => Kind::I32x4ShrU,
            I32x4Add => Kind::I32x4Add,
            I32x4Sub => Kind::I32x4Sub,
            I32x4Mul => Kind::I32x4Mul,
            I32x4MinS => Kind::I32x4MinS,
            I32x4MinU => Kind::I32x4MinU,
            I32x4MaxS => Kind::I32x4MaxS,
            I32x4MaxU => Kind::I32x4MaxU,
            I32x4DotI16x8S => Kind::I32x4DotI16x8S,
            I32x4ExtMulLowI16x8S => Kind::I32x4ExtMulLowI16x8S,
            I32x4ExtMulHighI16x8S => Kind::I32x4ExtMulHighI16x8S,
            I32x4ExtMulLowI16x8U => Kind::I32x4ExtMulLowI16x8U,
            I32x4ExtMulHighI16x8U => Kind::I32x4ExtMulHighI16x8U,
            I64x2Abs => Kind::I64x2Abs,
            I64x2Neg => Kind::I64x2Neg,
            I64x2AllTrue => Kind::I64x2AllTrue,
            I64x2Bitmask => Kind::I64x2Bitmask,
            I64x2ExtendLowI32x4S => Kind::I64x2ExtendLowI32x4S,
            I64x2ExtendHighI32x4S => Kind::I64x2ExtendHighI32x4S,
            I64x2ExtendLowI32x4U => Kind::I64x2ExtendLowI32x4U,
            I64x2ExtendHighI32x4U => Kind::I64x2ExtendHighI32x4U,
            I64x2Shl => Kind::I64x2Shl,
            I64x2ShrS => Kind::I64x2ShrS,
            I64x2ShrU => Kind::I64x2ShrU,
            I64x2Add => Kind::I64x2Add,
            I64x2Sub => Kind::I64x2Sub,
            I64x2Mul => Kind::I64x2Mul,
            I64x2ExtMulLowI32x4S => Kind::I64x2ExtMulLowI32x4S,
            I64x2ExtMulHighI32x4S => Kind::I64x2ExtMulHighI32x4S,
            I64x2ExtMulLowI32x4U => Kind::I64x2ExtMulLowI32x4U,
            I64x2ExtMulHighI32x4U => Kind::I64x2ExtMulHighI32x4U,
            F32x4Ceil => Kind::F32x4Ceil,
            F32x4Floor => Kind::F32x4Floor,
            F32x4Trunc => Kind::F32x4Trunc,
            F32x4Nearest => Kind::F32x4Nearest,
            F32x4Abs => Kind::F32x4Abs,
            F32x4Neg => Kind::F32x4Neg,
            F32x4Sqrt => Kind::F32x4Sqrt,
            F32x4Add => Kind::F32x4Add,
            F32x4Sub => Kind::F32x4Sub,
            F32x4Mul => Kind::F32x4Mul,
            F32x4Div => Kind::F32x4Div,
            F32x4Min => Kind::F32x4Min,
            F32x4Max => Kind::F32x4Max,
            F32x4PMin => Kind::F32x4PMin,
            F32x4PMax => Kind::F32x4PMax,
            F64x2Ceil => Kind::F64x2Ceil,
            F64x2Floor => Kind::F64x2Floor,
            F64x2Trunc => Kind::F64x2Trunc,
            F64x2Nearest => Kind::F64x2Nearest,
            F64x2Abs => Kind::F64x2Abs,
            F64x2Neg => Kind::F64x2Neg,
            F64x2Sqrt => Kind::F64x2Sqrt,
            F64x2Add => Kind::F64x2Add,
            F64x2Sub => Kind::F64x2Sub,
            F64x2Mul => Kind::F64x2Mul,
            F64x2Div => Kind::F64x2Div,
            F64x2Min => Kind::F64x2Min,
            F64x2Max => Kind::F64x2Max,
            F64x2PMin => Kind::F64x2PMin,
            F64x2PMax => Kind::F64x2PMax,
            I32x4TruncSatF32x4S => Kind::I32x4TruncSatF32x4S,
            I32x4TruncSatF32x4U => Kind::I32x4TruncSatF32x4U,
            F32x4ConvertI32x4S => Kind::F32x4ConvertI32x4S,
            F32x4ConvertI32x4U => Kind::F32x4ConvertI32x4U,
            I32x4TruncSatF64x2SZero => Kind::I32x4TruncSatF64x2SZero,
            I32x4TruncSatF64x2UZero => Kind::I32x4TruncSatF64x2UZero,
            F64x2ConvertLowI32x4S => Kind::F64x2ConvertLowI32x4S,
            F64x2ConvertLowI32x4U => Kind::F64x2ConvertLowI32x4U,
            F32x4DemoteF64x2Zero => Kind::F32x4DemoteF64x2Zero,
            F64x2PromoteLowF32x4 => Kind::F64x2PromoteLowF32x4,
            I8x16SwizzleRelaxed => Kind::I8x16SwizzleRelaxed,
            I32x4TruncSatF32x4SRelaxed => Kind::I32x4TruncSatF32x4SRelaxed,
            I32x4TruncSatF32x4URelaxed => Kind::I32x4TruncSatF32x4URelaxed,
            I32x4TruncSatF64x2SZeroRelaxed => Kind::I32x4TruncSatF64x2SZeroRelaxed,
            I32x4TruncSatF64x2UZeroRelaxed => Kind::I32x4TruncSatF64x2UZeroRelaxed,
            F32x4FmaRelaxed => Kind::F32x4FmaRelaxed,
            F32x4FmsRelaxed => Kind::F32x4FmsRelaxed,
            F64x2FmaRelaxed => Kind::F64x2FmaRelaxed,
            F64x2FmsRelaxed => Kind::F64x2FmsRelaxed,
            I8x16LaneSelect => Kind::I8x16LaneSelect,
            I16x8LaneSelect => Kind::I16x8LaneSelect,
            I32x4LaneSelect => Kind::I32x4LaneSelect,
            I64x2LaneSelect => Kind::I64x2LaneSelect,
            F32x4MinRelaxed => Kind::F32x4MinRelaxed,
            F32x4MaxRelaxed => Kind::F32x4MaxRelaxed,
            F64x2MinRelaxed => Kind::F64x2MinRelaxed,
            F64x2MaxRelaxed => Kind::F64x2MaxRelaxed,
        };
        Ok(Instr { kind })
    }
}

#[derive(Debug)]
pub enum Kind {
    Unreachable,
    Nop,
    Block {
        ty: TypeOrFuncType,
    },
    Loop {
        ty: TypeOrFuncType,
    },
    If {
        ty: TypeOrFuncType,
    },
    Else,
    Try {
        ty: TypeOrFuncType,
    },
    Catch {
        index: u32,
    },
    Throw {
        index: u32,
    },
    Rethrow {
        relative_depth: u32,
    },
    End,
    Br {
        relative_depth: u32,
    },
    BrIf {
        relative_depth: u32,
    },
    BrTable {
        table: BrTableData,
    },
    Return,
    Call {
        function_index: u32,
    },
    CallIndirect {
        index: u32,
        table_index: u32,
    },
    ReturnCall {
        function_index: u32,
    },
    ReturnCallIndirect {
        index: u32,
        table_index: u32,
    },
    Delegate {
        relative_depth: u32,
    },
    CatchAll,
    Drop,
    Select,
    TypedSelect {
        ty: Type,
    },
    LocalGet {
        local_index: u32,
    },
    LocalSet {
        local_index: u32,
    },
    LocalTee {
        local_index: u32,
    },
    GlobalGet {
        global_index: u32,
    },
    GlobalSet {
        global_index: u32,
    },
    I32Load {
        memarg: MemoryImmediate,
    },
    I64Load {
        memarg: MemoryImmediate,
    },
    F32Load {
        memarg: MemoryImmediate,
    },
    F64Load {
        memarg: MemoryImmediate,
    },
    I32Load8S {
        memarg: MemoryImmediate,
    },
    I32Load8U {
        memarg: MemoryImmediate,
    },
    I32Load16S {
        memarg: MemoryImmediate,
    },
    I32Load16U {
        memarg: MemoryImmediate,
    },
    I64Load8S {
        memarg: MemoryImmediate,
    },
    I64Load8U {
        memarg: MemoryImmediate,
    },
    I64Load16S {
        memarg: MemoryImmediate,
    },
    I64Load16U {
        memarg: MemoryImmediate,
    },
    I64Load32S {
        memarg: MemoryImmediate,
    },
    I64Load32U {
        memarg: MemoryImmediate,
    },
    I32Store {
        memarg: MemoryImmediate,
    },
    I64Store {
        memarg: MemoryImmediate,
    },
    F32Store {
        memarg: MemoryImmediate,
    },
    F64Store {
        memarg: MemoryImmediate,
    },
    I32Store8 {
        memarg: MemoryImmediate,
    },
    I32Store16 {
        memarg: MemoryImmediate,
    },
    I64Store8 {
        memarg: MemoryImmediate,
    },
    I64Store16 {
        memarg: MemoryImmediate,
    },
    I64Store32 {
        memarg: MemoryImmediate,
    },
    MemorySize {
        mem: u32,
        mem_byte: u8,
    },
    MemoryGrow {
        mem: u32,
        mem_byte: u8,
    },
    I32Const {
        value: i32,
    },
    I64Const {
        value: i64,
    },
    F32Const {
        value: Ieee32,
    },
    F64Const {
        value: Ieee64,
    },
    RefNull {
        ty: Type,
    },
    RefIsNull,
    RefFunc {
        function_index: u32,
    },
    I32Eqz,
    I32Eq,
    I32Ne,
    I32LtS,
    I32LtU,
    I32GtS,
    I32GtU,
    I32LeS,
    I32LeU,
    I32GeS,
    I32GeU,
    I64Eqz,
    I64Eq,
    I64Ne,
    I64LtS,
    I64LtU,
    I64GtS,
    I64GtU,
    I64LeS,
    I64LeU,
    I64GeS,
    I64GeU,
    F32Eq,
    F32Ne,
    F32Lt,
    F32Gt,
    F32Le,
    F32Ge,
    F64Eq,
    F64Ne,
    F64Lt,
    F64Gt,
    F64Le,
    F64Ge,
    I32Clz,
    I32Ctz,
    I32Popcnt,
    I32Add,
    I32Sub,
    I32Mul,
    I32DivS,
    I32DivU,
    I32RemS,
    I32RemU,
    I32And,
    I32Or,
    I32Xor,
    I32Shl,
    I32ShrS,
    I32ShrU,
    I32Rotl,
    I32Rotr,
    I64Clz,
    I64Ctz,
    I64Popcnt,
    I64Add,
    I64Sub,
    I64Mul,
    I64DivS,
    I64DivU,
    I64RemS,
    I64RemU,
    I64And,
    I64Or,
    I64Xor,
    I64Shl,
    I64ShrS,
    I64ShrU,
    I64Rotl,
    I64Rotr,
    F32Abs,
    F32Neg,
    F32Ceil,
    F32Floor,
    F32Trunc,
    F32Nearest,
    F32Sqrt,
    F32Add,
    F32Sub,
    F32Mul,
    F32Div,
    F32Min,
    F32Max,
    F32Copysign,
    F64Abs,
    F64Neg,
    F64Ceil,
    F64Floor,
    F64Trunc,
    F64Nearest,
    F64Sqrt,
    F64Add,
    F64Sub,
    F64Mul,
    F64Div,
    F64Min,
    F64Max,
    F64Copysign,
    I32WrapI64,
    I32TruncF32S,
    I32TruncF32U,
    I32TruncF64S,
    I32TruncF64U,
    I64ExtendI32S,
    I64ExtendI32U,
    I64TruncF32S,
    I64TruncF32U,
    I64TruncF64S,
    I64TruncF64U,
    F32ConvertI32S,
    F32ConvertI32U,
    F32ConvertI64S,
    F32ConvertI64U,
    F32DemoteF64,
    F64ConvertI32S,
    F64ConvertI32U,
    F64ConvertI64S,
    F64ConvertI64U,
    F64PromoteF32,
    I32ReinterpretF32,
    I64ReinterpretF64,
    F32ReinterpretI32,
    F64ReinterpretI64,
    I32Extend8S,
    I32Extend16S,
    I64Extend8S,
    I64Extend16S,
    I64Extend32S,
    I32TruncSatF32S,
    I32TruncSatF32U,
    I32TruncSatF64S,
    I32TruncSatF64U,
    I64TruncSatF32S,
    I64TruncSatF32U,
    I64TruncSatF64S,
    I64TruncSatF64U,
    MemoryInit {
        segment: u32,
        mem: u32,
    },
    DataDrop {
        segment: u32,
    },
    MemoryCopy {
        src: u32,
        dst: u32,
    },
    MemoryFill {
        mem: u32,
    },
    TableInit {
        segment: u32,
        table: u32,
    },
    ElemDrop {
        segment: u32,
    },
    TableCopy {
        dst_table: u32,
        src_table: u32,
    },
    TableFill {
        table: u32,
    },
    TableGet {
        table: u32,
    },
    TableSet {
        table: u32,
    },
    TableGrow {
        table: u32,
    },
    TableSize {
        table: u32,
    },
    MemoryAtomicNotify {
        memarg: MemoryImmediate,
    },
    MemoryAtomicWait32 {
        memarg: MemoryImmediate,
    },
    MemoryAtomicWait64 {
        memarg: MemoryImmediate,
    },
    AtomicFence {
        flags: u8,
    },
    I32AtomicLoad {
        memarg: MemoryImmediate,
    },
    I64AtomicLoad {
        memarg: MemoryImmediate,
    },
    I32AtomicLoad8U {
        memarg: MemoryImmediate,
    },
    I32AtomicLoad16U {
        memarg: MemoryImmediate,
    },
    I64AtomicLoad8U {
        memarg: MemoryImmediate,
    },
    I64AtomicLoad16U {
        memarg: MemoryImmediate,
    },
    I64AtomicLoad32U {
        memarg: MemoryImmediate,
    },
    I32AtomicStore {
        memarg: MemoryImmediate,
    },
    I64AtomicStore {
        memarg: MemoryImmediate,
    },
    I32AtomicStore8 {
        memarg: MemoryImmediate,
    },
    I32AtomicStore16 {
        memarg: MemoryImmediate,
    },
    I64AtomicStore8 {
        memarg: MemoryImmediate,
    },
    I64AtomicStore16 {
        memarg: MemoryImmediate,
    },
    I64AtomicStore32 {
        memarg: MemoryImmediate,
    },
    I32AtomicRmwAdd {
        memarg: MemoryImmediate,
    },
    I64AtomicRmwAdd {
        memarg: MemoryImmediate,
    },
    I32AtomicRmw8AddU {
        memarg: MemoryImmediate,
    },
    I32AtomicRmw16AddU {
        memarg: MemoryImmediate,
    },
    I64AtomicRmw8AddU {
        memarg: MemoryImmediate,
    },
    I64AtomicRmw16AddU {
        memarg: MemoryImmediate,
    },
    I64AtomicRmw32AddU {
        memarg: MemoryImmediate,
    },
    I32AtomicRmwSub {
        memarg: MemoryImmediate,
    },
    I64AtomicRmwSub {
        memarg: MemoryImmediate,
    },
    I32AtomicRmw8SubU {
        memarg: MemoryImmediate,
    },
    I32AtomicRmw16SubU {
        memarg: MemoryImmediate,
    },
    I64AtomicRmw8SubU {
        memarg: MemoryImmediate,
    },
    I64AtomicRmw16SubU {
        memarg: MemoryImmediate,
    },
    I64AtomicRmw32SubU {
        memarg: MemoryImmediate,
    },
    I32AtomicRmwAnd {
        memarg: MemoryImmediate,
    },
    I64AtomicRmwAnd {
        memarg: MemoryImmediate,
    },
    I32AtomicRmw8AndU {
        memarg: MemoryImmediate,
    },
    I32AtomicRmw16AndU {
        memarg: MemoryImmediate,
    },
    I64AtomicRmw8AndU {
        memarg: MemoryImmediate,
    },
    I64AtomicRmw16AndU {
        memarg: MemoryImmediate,
    },
    I64AtomicRmw32AndU {
        memarg: MemoryImmediate,
    },
    I32AtomicRmwOr {
        memarg: MemoryImmediate,
    },
    I64AtomicRmwOr {
        memarg: MemoryImmediate,
    },
    I32AtomicRmw8OrU {
        memarg: MemoryImmediate,
    },
    I32AtomicRmw16OrU {
        memarg: MemoryImmediate,
    },
    I64AtomicRmw8OrU {
        memarg: MemoryImmediate,
    },
    I64AtomicRmw16OrU {
        memarg: MemoryImmediate,
    },
    I64AtomicRmw32OrU {
        memarg: MemoryImmediate,
    },
    I32AtomicRmwXor {
        memarg: MemoryImmediate,
    },
    I64AtomicRmwXor {
        memarg: MemoryImmediate,
    },
    I32AtomicRmw8XorU {
        memarg: MemoryImmediate,
    },
    I32AtomicRmw16XorU {
        memarg: MemoryImmediate,
    },
    I64AtomicRmw8XorU {
        memarg: MemoryImmediate,
    },
    I64AtomicRmw16XorU {
        memarg: MemoryImmediate,
    },
    I64AtomicRmw32XorU {
        memarg: MemoryImmediate,
    },
    I32AtomicRmwXchg {
        memarg: MemoryImmediate,
    },
    I64AtomicRmwXchg {
        memarg: MemoryImmediate,
    },
    I32AtomicRmw8XchgU {
        memarg: MemoryImmediate,
    },
    I32AtomicRmw16XchgU {
        memarg: MemoryImmediate,
    },
    I64AtomicRmw8XchgU {
        memarg: MemoryImmediate,
    },
    I64AtomicRmw16XchgU {
        memarg: MemoryImmediate,
    },
    I64AtomicRmw32XchgU {
        memarg: MemoryImmediate,
    },
    I32AtomicRmwCmpxchg {
        memarg: MemoryImmediate,
    },
    I64AtomicRmwCmpxchg {
        memarg: MemoryImmediate,
    },
    I32AtomicRmw8CmpxchgU {
        memarg: MemoryImmediate,
    },
    I32AtomicRmw16CmpxchgU {
        memarg: MemoryImmediate,
    },
    I64AtomicRmw8CmpxchgU {
        memarg: MemoryImmediate,
    },
    I64AtomicRmw16CmpxchgU {
        memarg: MemoryImmediate,
    },
    I64AtomicRmw32CmpxchgU {
        memarg: MemoryImmediate,
    },
    V128Load {
        memarg: MemoryImmediate,
    },
    V128Load8x8S {
        memarg: MemoryImmediate,
    },
    V128Load8x8U {
        memarg: MemoryImmediate,
    },
    V128Load16x4S {
        memarg: MemoryImmediate,
    },
    V128Load16x4U {
        memarg: MemoryImmediate,
    },
    V128Load32x2S {
        memarg: MemoryImmediate,
    },
    V128Load32x2U {
        memarg: MemoryImmediate,
    },
    V128Load8Splat {
        memarg: MemoryImmediate,
    },
    V128Load16Splat {
        memarg: MemoryImmediate,
    },
    V128Load32Splat {
        memarg: MemoryImmediate,
    },
    V128Load64Splat {
        memarg: MemoryImmediate,
    },
    V128Load32Zero {
        memarg: MemoryImmediate,
    },
    V128Load64Zero {
        memarg: MemoryImmediate,
    },
    V128Store {
        memarg: MemoryImmediate,
    },
    V128Load8Lane {
        memarg: MemoryImmediate,
        lane: SIMDLaneIndex,
    },
    V128Load16Lane {
        memarg: MemoryImmediate,
        lane: SIMDLaneIndex,
    },
    V128Load32Lane {
        memarg: MemoryImmediate,
        lane: SIMDLaneIndex,
    },
    V128Load64Lane {
        memarg: MemoryImmediate,
        lane: SIMDLaneIndex,
    },
    V128Store8Lane {
        memarg: MemoryImmediate,
        lane: SIMDLaneIndex,
    },
    V128Store16Lane {
        memarg: MemoryImmediate,
        lane: SIMDLaneIndex,
    },
    V128Store32Lane {
        memarg: MemoryImmediate,
        lane: SIMDLaneIndex,
    },
    V128Store64Lane {
        memarg: MemoryImmediate,
        lane: SIMDLaneIndex,
    },
    V128Const {
        value: V128,
    },
    I8x16Shuffle {
        lanes: [SIMDLaneIndex; 16],
    },
    I8x16ExtractLaneS {
        lane: SIMDLaneIndex,
    },
    I8x16ExtractLaneU {
        lane: SIMDLaneIndex,
    },
    I8x16ReplaceLane {
        lane: SIMDLaneIndex,
    },
    I16x8ExtractLaneS {
        lane: SIMDLaneIndex,
    },
    I16x8ExtractLaneU {
        lane: SIMDLaneIndex,
    },
    I16x8ReplaceLane {
        lane: SIMDLaneIndex,
    },
    I32x4ExtractLane {
        lane: SIMDLaneIndex,
    },
    I32x4ReplaceLane {
        lane: SIMDLaneIndex,
    },
    I64x2ExtractLane {
        lane: SIMDLaneIndex,
    },
    I64x2ReplaceLane {
        lane: SIMDLaneIndex,
    },
    F32x4ExtractLane {
        lane: SIMDLaneIndex,
    },
    F32x4ReplaceLane {
        lane: SIMDLaneIndex,
    },
    F64x2ExtractLane {
        lane: SIMDLaneIndex,
    },
    F64x2ReplaceLane {
        lane: SIMDLaneIndex,
    },
    I8x16Swizzle,
    I8x16Splat,
    I16x8Splat,
    I32x4Splat,
    I64x2Splat,
    F32x4Splat,
    F64x2Splat,
    I8x16Eq,
    I8x16Ne,
    I8x16LtS,
    I8x16LtU,
    I8x16GtS,
    I8x16GtU,
    I8x16LeS,
    I8x16LeU,
    I8x16GeS,
    I8x16GeU,
    I16x8Eq,
    I16x8Ne,
    I16x8LtS,
    I16x8LtU,
    I16x8GtS,
    I16x8GtU,
    I16x8LeS,
    I16x8LeU,
    I16x8GeS,
    I16x8GeU,
    I32x4Eq,
    I32x4Ne,
    I32x4LtS,
    I32x4LtU,
    I32x4GtS,
    I32x4GtU,
    I32x4LeS,
    I32x4LeU,
    I32x4GeS,
    I32x4GeU,
    I64x2Eq,
    I64x2Ne,
    I64x2LtS,
    I64x2GtS,
    I64x2LeS,
    I64x2GeS,
    F32x4Eq,
    F32x4Ne,
    F32x4Lt,
    F32x4Gt,
    F32x4Le,
    F32x4Ge,
    F64x2Eq,
    F64x2Ne,
    F64x2Lt,
    F64x2Gt,
    F64x2Le,
    F64x2Ge,
    V128Not,
    V128And,
    V128AndNot,
    V128Or,
    V128Xor,
    V128Bitselect,
    V128AnyTrue,
    I8x16Abs,
    I8x16Neg,
    I8x16Popcnt,
    I8x16AllTrue,
    I8x16Bitmask,
    I8x16NarrowI16x8S,
    I8x16NarrowI16x8U,
    I8x16Shl,
    I8x16ShrS,
    I8x16ShrU,
    I8x16Add,
    I8x16AddSatS,
    I8x16AddSatU,
    I8x16Sub,
    I8x16SubSatS,
    I8x16SubSatU,
    I8x16MinS,
    I8x16MinU,
    I8x16MaxS,
    I8x16MaxU,
    I8x16RoundingAverageU,
    I16x8ExtAddPairwiseI8x16S,
    I16x8ExtAddPairwiseI8x16U,
    I16x8Abs,
    I16x8Neg,
    I16x8Q15MulrSatS,
    I16x8AllTrue,
    I16x8Bitmask,
    I16x8NarrowI32x4S,
    I16x8NarrowI32x4U,
    I16x8ExtendLowI8x16S,
    I16x8ExtendHighI8x16S,
    I16x8ExtendLowI8x16U,
    I16x8ExtendHighI8x16U,
    I16x8Shl,
    I16x8ShrS,
    I16x8ShrU,
    I16x8Add,
    I16x8AddSatS,
    I16x8AddSatU,
    I16x8Sub,
    I16x8SubSatS,
    I16x8SubSatU,
    I16x8Mul,
    I16x8MinS,
    I16x8MinU,
    I16x8MaxS,
    I16x8MaxU,
    I16x8RoundingAverageU,
    I16x8ExtMulLowI8x16S,
    I16x8ExtMulHighI8x16S,
    I16x8ExtMulLowI8x16U,
    I16x8ExtMulHighI8x16U,
    I32x4ExtAddPairwiseI16x8S,
    I32x4ExtAddPairwiseI16x8U,
    I32x4Abs,
    I32x4Neg,
    I32x4AllTrue,
    I32x4Bitmask,
    I32x4ExtendLowI16x8S,
    I32x4ExtendHighI16x8S,
    I32x4ExtendLowI16x8U,
    I32x4ExtendHighI16x8U,
    I32x4Shl,
    I32x4ShrS,
    I32x4ShrU,
    I32x4Add,
    I32x4Sub,
    I32x4Mul,
    I32x4MinS,
    I32x4MinU,
    I32x4MaxS,
    I32x4MaxU,
    I32x4DotI16x8S,
    I32x4ExtMulLowI16x8S,
    I32x4ExtMulHighI16x8S,
    I32x4ExtMulLowI16x8U,
    I32x4ExtMulHighI16x8U,
    I64x2Abs,
    I64x2Neg,
    I64x2AllTrue,
    I64x2Bitmask,
    I64x2ExtendLowI32x4S,
    I64x2ExtendHighI32x4S,
    I64x2ExtendLowI32x4U,
    I64x2ExtendHighI32x4U,
    I64x2Shl,
    I64x2ShrS,
    I64x2ShrU,
    I64x2Add,
    I64x2Sub,
    I64x2Mul,
    I64x2ExtMulLowI32x4S,
    I64x2ExtMulHighI32x4S,
    I64x2ExtMulLowI32x4U,
    I64x2ExtMulHighI32x4U,
    F32x4Ceil,
    F32x4Floor,
    F32x4Trunc,
    F32x4Nearest,
    F32x4Abs,
    F32x4Neg,
    F32x4Sqrt,
    F32x4Add,
    F32x4Sub,
    F32x4Mul,
    F32x4Div,
    F32x4Min,
    F32x4Max,
    F32x4PMin,
    F32x4PMax,
    F64x2Ceil,
    F64x2Floor,
    F64x2Trunc,
    F64x2Nearest,
    F64x2Abs,
    F64x2Neg,
    F64x2Sqrt,
    F64x2Add,
    F64x2Sub,
    F64x2Mul,
    F64x2Div,
    F64x2Min,
    F64x2Max,
    F64x2PMin,
    F64x2PMax,
    I32x4TruncSatF32x4S,
    I32x4TruncSatF32x4U,
    F32x4ConvertI32x4S,
    F32x4ConvertI32x4U,
    I32x4TruncSatF64x2SZero,
    I32x4TruncSatF64x2UZero,
    F64x2ConvertLowI32x4S,
    F64x2ConvertLowI32x4U,
    F32x4DemoteF64x2Zero,
    F64x2PromoteLowF32x4,
    I8x16SwizzleRelaxed,
    I32x4TruncSatF32x4SRelaxed,
    I32x4TruncSatF32x4URelaxed,
    I32x4TruncSatF64x2SZeroRelaxed,
    I32x4TruncSatF64x2UZeroRelaxed,
    F32x4FmaRelaxed,
    F32x4FmsRelaxed,
    F64x2FmaRelaxed,
    F64x2FmsRelaxed,
    I8x16LaneSelect,
    I16x8LaneSelect,
    I32x4LaneSelect,
    I64x2LaneSelect,
    F32x4MinRelaxed,
    F32x4MaxRelaxed,
    F64x2MinRelaxed,
    F64x2MaxRelaxed,
}
